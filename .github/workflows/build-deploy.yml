# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Website Tester, Linter and Builder

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # Install deps for ALL Jobs
  install: 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # CACHE!
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      name: actions/cache@v2 - yarn cache
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: yarn install --frozen-lockfile # Install deps -no cache so just install fresh
      if: steps.yarn-cache.outputs.cache-hit != 'true'
    - name: Install project dependencies from cache
      run: yarn --prefer-offline --frozen-lockfile
      if: steps.yarn-cache.outputs.cache-hit == 'true'
    # Upload node_modules to download for other steps
    - uses: actions/cache@v2
      name: actions/cache@v2 - upload node_modules for other jobs
      id: module-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ github.sha }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-${{ github.sha }}-

  lint: # Lint!
    runs-on: ubuntu-latest
    needs: [install]

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    # Get CACHE!
    - uses: actions/cache@v2
      name: actions/cache@v2 - download node_modules
      id: moduleCache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ github.sha }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-${{ github.sha }}-
      
    
    # Lint
    - name: Lint using ESLint
      run: yarn run lint
  
  build-deploy: # Now build & deploy the repo

    runs-on: ubuntu-latest
    needs: [install]

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # Get cache
    # CACHE!
    - uses: actions/cache@v2
      name: actions/cache@v2 - download node_modules
      id: moduleCache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ github.sha }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-${{ github.sha }}-
      
    # BUILD
    - name: Build the site
      run: yarn build
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: Website Build
        # A file, directory or wildcard pattern that describes what to upload
        path: public/
    
    - name: Deploy ðŸš€
      uses: JamesIves/github-pages-deploy-action@3.7.1
      if: ${{ contains(github.ref, 'master') }} # Only run if this repo is master and the development branch
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: prod # The branch the action should deploy to.
        FOLDER: public # The folder the action should deploy.
        CLEAN: true # Automatically remove deleted files from the deploy branch
